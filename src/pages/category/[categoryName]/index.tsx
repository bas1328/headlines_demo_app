import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { GetStaticPropsContext } from "next";

import { QueryClient, dehydrate, useQuery } from "@tanstack/react-query";
import { getHeadlines } from "@/fetchers/getHeadlines/getHeadlines";

import { CATEGORIES, PAGE_SIZE } from "@/common/constants";
import { Article, CategoriesUnion } from "@/types/common";

import styles from "./Category.module.scss";
import { useRouter } from "next/router";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { categoryName } = useRouter().query;

  const { data } = useQuery<Article[]>(["headlines_by_category"], () =>
    getHeadlines({
      // safe type casting because we reroute to 404 if category is not in CATEGORIES
      category: categoryName as CategoriesUnion,
      pageSize: PAGE_SIZE,
    })
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        {data?.map((article) => (
          <div key={article.source?.id || article?.publishedAt || article?.url}>
            <h1>{article?.title}</h1>
            <p>{article?.description}</p>
            {article?.urlToImage && (
              <div className={styles.imageContainer}>
                <Image
                  src={article?.urlToImage}
                  alt={article?.title || "Article Image"}
                  fill
                  objectFit="contain"
                />
              </div>
            )}
          </div>
        ))}
      </main>
    </>
  );
}

export async function getServerSideProps({ params }: GetStaticPropsContext) {
  const queryClient = new QueryClient();

  const category = params?.categoryName;

  if (!CATEGORIES.includes(category as string)) {
    return {
      redirect: {
        destination: "/404",
        permanent: false,
      },
    };
  }

  await queryClient.prefetchQuery(["headlines_by_category"], () =>
    // type casting is safe because we check if category is in CATEGORIES
    getHeadlines({ category: category as CategoriesUnion, pageSize: PAGE_SIZE })
  );

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}
